//Methods(Entity Methods, Collection Methods, Datastore Class Methods), Events (Attribute Events, Datastore Class Events, Calculated Attributes)model.Registration = {};//*** METHODS//model.XXXX.entityMethods = {};//model.XXXX.collectionMethods = {};model.Registration.methods = {};model.Registration.methods.newRegistration = function(regObject){	var status = ''; //holds the status of each save		try{		ds.startTransaction();				//create all needed entities and relations for the registration				//first creates the account and the user so automatic permission assignment works properly in model scripts		var theAccount = new ds.Account({name: regObject.accountName});		theAccount.save();		currentSession().storage.accountID = theAccount.ID; //Set session accountID to this account for user creation script			var adminUser = new ds.User({username: regObject.adminUsername, password: regObject.adminPassword, person: adminPerson, language: 'en', account: theAccount});		adminUser.save(); //account is set based on session ID				loginByPassword(adminUser.username, adminUser.password); //creates a session with the registered user for automatic permission functions		var userGroup = new ds.Group({name: 'AccountOwner', user: adminUser});		userGroup.save();				var theCompany = new ds.Company({name: regObject.companyName});		theCompany.save();				//Assign relationships to the account to items not created when account was created		theAccount.company = theCompany;		theAccount.owner = adminUser;		theAccount.save();				var adminPerson = new ds.Person({firstName: regObject.adminFirstName, lastName: regObject.adminLastName, employer: theCompany});		adminPerson.save();				adminUser.person = adminPerson;		adminUser.save();				var accountSettings = new ds.Setting({invoiceCounter: 0, account: theAccount});		accountSettings.save();				adminUser.account = theAccount;		adminUser.save();				var theRegistration = new ds.Registration({createdAt: new Date(), account: theAccount});		theRegistration.save();				ds.commit();		loginByPassword(regObject.adminUsername, regObject.adminPassword);		return true;				} catch (err) {		//TODO: deal with error properly		return err;	}}model.Registration.methods.newRegistration.scope = 'public';//*** EVENTS//model.XXXX.attributeName = {};//model.XXXX.attributeName.events = {};//model.XXXX.events = {};//Calcuated attributes