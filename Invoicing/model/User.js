//Methods(Entity Methods, Collection Methods, Datastore Class Methods), Events (Attribute Events, Datastore Class Events, Calculated Attributes)model.User = {};//*** METHODSmodel.User.entityMethods = {};model.User.entityMethods.validatePassword = function(password){	//validate if the hash in the User datastore class matches for the provided userName/password	var hash = directory.computeHA1(this.ID, password);	return (hash === this.HA1Key); //return true or false depending on match status}model.User.entityMethods.validatePassword.scope = 'publicOnServer';//model.XXXX.collectionMethods = {};model.User.methods = {};model.User.methods.getSettings = function(){	return {		language: currentSession().storage.language	}}model.User.methods.getSettings.scope = 'public';//*** ATTRIBUTE EVENTSmodel.User.username = {};model.User.username.events = {};model.User.username.events.onValidate = function(){	if(this.username == 'admin'){		return {error: 100, errorMessage: 'cannot use admin as username - reserved'};			}	}model.User.language = {};model.User.language.events = {};model.User.language.events.onInit = function(){	this.language = 'en'; //set the default language of a new user to en}//*** DATASTORE CLASS EVENTSmodel.User.events = {};model.User.events.onInit = function(){	this.account = IN.getCurrentAccount(); //Assign the current account to the new user}model.User.events.onSave = function(){	debugger;}model.User.events.onRemove = function(){	//ensure that the person is not trying to remove the account owner	if(currentSession().belongsTo('AccountOwner')){		return {error: 120, errorMessage: 'You cannot delete the account owner'};	} else {		//TODO: are there items needing permissions to be assigned to them? Check when permissions system is a little more complete	}}model.User.events.onRestrictingQuery = function(){//	ds.User.query('account.ID = :1', currentSession().storage.accountID);	if(currentSession() !== null){		if(currentSession().belongsTo('System')){			//return all items - likely a login attempt			return ds.User.all();		} else {			 //return only users belonging to the current account			return ds.User.query('account.ID = :1', currentSession().storage.accountID);		}	} else {		return {error: 100, errorMessage: "no current session"}; //TODO: proper error handling multi language	}}//Calculated attributesmodel.User.password = {};model.User.password.onSet = function(password){	//calculate and save HA1Key based on incoming password and user ID attribute (uuid)	this.HA1Key = directory.computeHA1(this.ID, password);}model.User.password.onGet = function(){	//Return null as the password is not stored in the datastore class	return null;}