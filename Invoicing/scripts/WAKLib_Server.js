WAKLIB = {};WAKLIB.utils = {};WAKLIB.utils.isEmpty = function(value){	if(value == null || value == undefined || value == '' || value == 0 || value == {} || value == []){		return true;	} else {		return false;	}}WAKLIB.utils.random = function(high, low){	low = typeof a !== 'undefined' ? low : 0;	return Math.floor(Math.random() * (high - low + 1)) + low;}WAKLIB.utils.indexOf = function(property, value, array){ //internal utility function for finding an object attribute in an array	var index = null;	for (var i = 0; i < array.length; i++) {	  if (array[i][property] === value) {	    index = i;	    break;	  }	}	return index;}WAKLIB.utils.generateFullName = function(firstName, lastName, partnerFirst, partnerLast){	var nameTotal = 0; //The unique value based on populated full name elements	//firstName = 1, lastName = 2, partnerfirst = 4, partnerLast = 8	nameTotal = (firstName == "" || firstName == null) ? nameTotal : nameTotal + 1;	nameTotal = (lastName == "" || lastName == null) ? nameTotal : nameTotal + 2;	nameTotal = (partnerFirst == "" || partnerFirst == null) ? nameTotal : nameTotal + 4;	nameTotal = (partnerLast == "" || partnerLast == null) ? nameTotal : nameTotal + 8;		switch (nameTotal) {		//Go through each name scenerio in order of likelyhood		case 0: //Nothing filled in			return "No Name";			break;		case 1: //First name filled in			return firstName; //Bob			break;		case 3: //First name & last name			return firstName + " " + lastName; //Bob Wilson			break;		case 15: //All values filled in			if(lastName == partnerLast){				return firstName + " & " + partnerFirst + " " + lastName; //Bob & Martha Wilson			} else {				return firstName + " " + lastName + " & " + partnerFirst + " " + partnerLast; //Bob Wilson & Martha Stevenson			}			break;		case 5: //Both first names			return firstName + " " + partnerFirst; //Bob & Martha			break;		case 7: //First, last and partner first			return firstName + " " + lastName + " & " + partnerFirst; //Bob Wilson & Martha			break;		case 13: //FirstName, partnerFirst, partnerLast			return firstName + "( " + partnerFirst + " " + partnerLast + " )"; //Bob (& Martha Wilson)			break;		case 12: //partnerFirst, partnerLast			return partnerFirst + " " + partnerLast; //Martha Wilson			break;		default: //all other scenarios			return "No Name";	}};//WAKLIB.validateWAKLIB.validate = {};WAKLIB.val = WAKLIB.validate; //short formWAKLIB.validate.settings = {};WAKLIB.validate.makeArray = function(param){ //validates and prepares parameters	if(!(Object.prototype.toString.call( param ) === '[object Array]')){		var groupResult = param.result;		param = [param];		param[0].groupResult = groupResult;	}	return param;}WAKLIB.validate.hasValue = function(values, options){	var results = [];	var groupResult = true;	var groupMessage = '';	var value = '';	var valueArray = WAKLIB.validate.makeArray(values);	valueArray.forEach(function (element){		value = element;		if(element == null || element == undefined || element == '' || element == 0){			groupResult = false;			groupMessage = 'Value is empty'			results.push({value: element, result: false, code: 'empty', message: 'Value is empty'});		} else {			results.push({value: element, result: true, code: '', message: ''});		}	});	if(results.length == 1){		return results[0];	} else {		results[0].groupResult = groupResult;		results[0].groupMessage = groupMessage;		return results;	}		}WAKLIB.validate.length = function(values, options){	//Example: WAKLIB.VAL.length(value, {minLength: 6, maxLength: 20});//	var multipleInput = false;//	(Object.prototype.toString.call( values ) === '[object Array]') ? multipleInput = true : multipleInput = false;	var results = [];	var groupResult = true;	var groupMessage = '';	var value = '';	var elementResult = {};//	var cssStyle = '';	var valueArray = WAKLIB.validate.makeArray(values);	valueArray.forEach(function(element){		elementResult = {};		value = String(element); //in event of a incoming number value		if(value.length < options.minLength){			groupMessage = 'Too short(min ' + options.minLength + ' characters)';			groupResult = false;			elementResult = {value: element, result: false, code: 'short', message: groupMessage};		}		if(value.length > options.maxLength){			groupMessage = 'Limit exceeded(' + options.maxLength + ' characters)';			groupResult = false;			elementResult = {value: element, result: false, code: 'long', message: groupMessage};		}		if(elementResult.result != false){ //it passed			elementResult = {widget: element, result: true, code: '', message: '', style: cssStyle, applyStyling: options.applyStyling};		}		results.push(elementResult);	});	if(results.length == 1){		return results[0];	} else {		results[0].groupResult = groupResult;		results[0].groupMessage = groupMessage;		return results;	}}WAKLIB.validate.isNumber = function(widgets, options, error){	}WAKLIB.validate.isEmail = function(widgets, options, error){	}WAKLIB.validate.equal = function(values, options){	//gets in values like ([value, value, value], {compareTo: value, strict: true, ignoreCase: true})	var results = [];	var groupResult = true;	var groupMessage = '';	var compareToValue = false;	var value = '';	var valueArray = WAKLIB.validate.makeArray(values);	valuesArray.forEach(function (element){		value = element;//		compareToValue = options.compareTo;					if(options.ignoreCase == true){			options.compareTo = options.compareTo.toLowerCase();			value = value.toLowerCase();		}		if(options.strict == true){			if(value === options.compareTo){				results.push({value: element, result: true, code: '', message: ''});			} else {				groupMessage = 'Values are not equal';				groupResult = false;				results.push({value: element, result: false, code: 'notEqual', message: groupMessage});			}			} else {			if(value == options.compareTo){				results.push({value: element, result: true, code: '', message: ''});			} else {				groupMessage = 'Values are not equal';							groupResult = false;				results.push({value: element, result: false, code: '', message: groupMessage});			}			}			});	if(results.length == 1){		return results[0];	} else {		results[0].groupResult = groupResult;		results[0].groupMessage = groupMessage;		return results;	}}WAKLIB.validate.unique = function(widgets, options, error){	var results = [];	var groupResult = true;	var groupMessage = '';	var isWidget = false;	var value = '';}WAKLIB.validate.multi = function(validations, options, error){	//get objects like [{widgets: widgetRef, valMethod: 'isEmail', options: {option: 'optionString'}, errorDiv: errorObj},{},{}]	//Goes through each array element and validates the form according to rules.	var results = [];	var multiResult = true; //the validation of the entire multi request	var multiMessage = '';	var validationArray = WAKLIB.validate.makeArray(validations);	validationArray.forEach(function(element){		switch(element.method){			case 'hasValue':				stepResults = WAKLIB.validate.hasValue(element.widgets, element.options, element.error);				break;			case 'length':				stepResults = WAKLIB.validate.length(element.widgets, element.options, element.error);				break;			case 'equal':				stepResults = WAKLIB.validate.equal(element.widgets, element.options, element.error);				break;			default:				stepResults = [];		}		stepResults = WAKLIB.validate.makeArray(stepResults);				if(!stepResults[0].groupResult){			multiResult = false;			multiMessage = stepResults[0].groupMessage;		}		stepResults = WAKLIB.validate.makeArray(stepResults);		results = results.concat(stepResults);		stepResults = [];	});	results[0].multiResult = multiResult;	results[0].multiMessage = multiMessage	return results;}